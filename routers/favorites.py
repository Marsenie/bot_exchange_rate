from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from services.favorites_storage import FavoritesStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from routers.exchange_rate import transfer, mal_client 
from keyboards.builders import main_kb

router = Router()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Ñ–∞–π–ª —Ä—è–¥–æ–º —Å bot.py: storage/favorites.json)
storage = FavoritesStorage("storage/favorites.json")

# ---- –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ----
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <iso> <iso>
@router.message(Command("add"))
async def cmd_add_fav(message: Message):
    parts = message.text.split(maxsplit=2)
    try:
        code_1, code_2 = parts[1].strip(), parts[2].strip()
    
        if len(code_1) != 3 or len(code_2) != 3:
            raise
    except:
        return await message.reply("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥—ã –≤–∞–ª—é—Ç: /add RUB USD", reply_markup=main_kb)

    await storage.add(message.from_user.id, f"{code_1} {code_2}")
    await message.reply(f"–û—Ç–Ω–æ—à–µ–Ω–∏—é –≤–∞–ª—é—Ç {code_1} {code_2} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", reply_markup=main_kb)

# ---- –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ----
@router.message(Command("favs"))
async def cmd_list_fav(message: Message):
    favs = await storage.list(message.from_user.id)
    if not favs:
        return await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üôÅ", reply_markup=main_kb)
    text = "–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n" + "\n".join(f"- {a}" for a in favs)
    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ:
    kb = InlineKeyboardBuilder()
    for fav in favs:
        kb.button(text=f"–í—ã–±—Ä–∞—Ç—å {fav}", callback_data=f"tranfer_currency {fav}")
    kb.adjust(1)
    await message.reply(text, reply_markup=kb.as_markup())

# –í—ã–±—Ä–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(lambda c: c.data.startswith("tranfer_currency "))
async def cmd_tranfer_currency(query: CallbackQuery):
    parts = query.data.split(" ", 3)
    code_1, code_2 = parts[1].strip(), parts[2].strip()
    await transfer(code_1, code_2, query.message)

# ---- –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π ----
@router.message(Command("del"))
async def cmd_remove_fav(message: Message):
    parts = message.text.split(maxsplit=2)
    try:
        code_1, code_2 = parts[1].strip(), parts[2].strip()
    
        if len(code_1) != 3 or len(code_2) != 3:
            raise
    except:
        return await message.reply("–ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥—ã –≤–∞–ª—é—Ç: /del RUB USD", reply_markup=main_kb)
    
    await storage.remove(message.from_user.id, f"{code_1} {code_2}")
    await message.reply(f"‚ùå –û—Ç–Ω–æ—à–µ–Ω–∏—é –≤–∞–ª—é—Ç {code_1} {code_2} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", reply_markup=main_kb)



